package com.example.pgp;

import org.bouncycastle.openpgp.PGPPublicKeyRing;
import org.pgpainless.PGPainless;
import org.pgpainless.encryption_signing.EncryptionOptions;
import org.pgpainless.encryption_signing.EncryptionStream;
import org.pgpainless.encryption_signing.ProducerOptions;
import org.pgpainless.algorithm.SymmetricKeyAlgorithm;
import org.pgpainless.algorithm.CompressionAlgorithm;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class PGPFileEncryptor {

    /**
     * Encrypt a file using a Base64-encoded public key and PGPainless 1.7.4
     */
    public static void encryptFile(File inputFile, String base64PublicKey, File outputFile) throws IOException {

        // Decode the Base64 public key to bytes
        byte[] keyBytes = Base64.getDecoder().decode(base64PublicKey.getBytes(StandardCharsets.UTF_8));

        // Parse the public key
        PGPPublicKeyRing publicKeyRing = PGPainless.readKeyRing()
                .publicKeyRing(new ByteArrayInputStream(keyBytes));

        // Build encryption options
        EncryptionOptions encryptionOptions = EncryptionOptions.get()
                .addRecipient(publicKeyRing)
                .overrideEncryptionAlgorithm(SymmetricKeyAlgorithm.AES_256);

        // Configure producer options (compression + binary output)
        ProducerOptions producerOptions = ProducerOptions.encrypt(encryptionOptions)
                .overrideCompressionAlgorithm(CompressionAlgorithm.ZIP)
                .setAsciiArmor(false);  // set true if you prefer .asc armored text

        // Perform encryption
        try (OutputStream fileOut = new FileOutputStream(outputFile);
             EncryptionStream encryptionStream = PGPainless.encryptAndOrSign()
                     .onOutputStream(fileOut)
                     .withOptions(producerOptions);
             InputStream inputStream = new FileInputStream(inputFile)) {

            // Java 17 shortcut: copy data efficiently
            inputStream.transferTo(encryptionStream);
        }

        System.out.println("✅ File encrypted successfully → " + outputFile.getAbsolutePath());
    }

    // Example usage
    public static void main(String[] args) throws IOException {
        File input = new File("sample.txt");
        File output = new File("sample.txt.pgp");

        // Replace with your actual Base64-encoded PUBLIC key
        String base64PublicKey = "mQENBFq...==";

        encryptFile(input, base64PublicKey, output);
    }
}
